#!/bin/bash -e

# gis-common
# Copyright (C) 2012-2013,2016 Brian Masney <masneyb@onstation.org>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e # Exit if any commands fail
set -u # Warn about uninitialized variables

download_file()
{
	local URL=$1
	local DEST=$2

	echo ""

	if [ -f "${DEST}" ] ; then
		echo "Skipping the download of ${URL} since ${DEST} already exists."
		return
	fi

	echo "Downloading ${URL} to ${DEST}."
	curl -L -o "${DEST}" "${URL}"
}

download_and_import_file()
{
	local URL=$1
	local DEST=$2
	local INNER_ZIP_SHP_FILENAME=$3
	local SRC_SRID=$4
	local DEST_DB_TABLE=$5
	local SHP2PGSQL_EXTRA_ARGS=$6
	local LIMIT_TO_FIELDS=$7
	local DEST_DB=$8
	local DEST_SRID=$9

	download_file "${URL}" "${DEST}"

	TABLE_EXISTS=$(does_postgresql_table_exist "${DEST_DB}" "${DEST_DB_TABLE}")
	if [ "${TABLE_EXISTS}" = "1" ] ; then
		echo "Skipping the import of ${DEST} since the table ${DEST_DB}.${DEST_DB_TABLE} already exists"
		return 0
	fi
	
	local ZIP_TMPDIR
	ZIP_TMPDIR=$(mktemp -d)
	unzip -qq "${DEST}" -d "${ZIP_TMPDIR}"
	import_shp "${SRC_SRID}" "${ZIP_TMPDIR}"/"${INNER_ZIP_SHP_FILENAME}" "${DEST_DB_TABLE}" "${SHP2PGSQL_EXTRA_ARGS}" "${LIMIT_TO_FIELDS}" "${DEST_DB}" "${DEST_SRID}"
	rm -rf "${ZIP_TMPDIR}"
}

import_shp()
{
	local SRC_SRID=$1
	local SRC_SHP=$2
	local DEST_DB_TABLE=$3
	local SHP2PGSQL_EXTRA_ARGS=$4
	local LIMIT_TO_FIELDS=$5
	local DEST_DB=$6
	local DEST_SRID=$7

	local OGRARGS=""

	if [ "${SRC_SRID}" != "${DEST_SRID}" ] ; then
		OGRARGS="-s_srs EPSG:${SRC_SRID} -t_srs EPSG:${DEST_SRID} ${OGRARGS}"
	fi

	if [ "${LIMIT_TO_FIELDS}" != "" ] ; then
		OGRARGS="-select ${LIMIT_TO_FIELDS} ${OGRARGS}"
	fi

	if [ "${OGRARGS}" != "" ] ; then
		local TRANS_TMPDIR
		TRANS_TMPDIR=$(mktemp -d)
		local NEW_SHP="${TRANS_TMPDIR}"/temp.shp
		echo "Transforming ${SRC_SHP} with ogr2ogr ${OGRARGS} via ${NEW_SHP}"
		ogr2ogr -skipfailures -f "ESRI Shapefile" ${OGRARGS} "${NEW_SHP}" "${SRC_SHP}"
		echo "Importing ${NEW_SHP} into table ${DEST_DB}.${DEST_DB_TABLE}"
		shp2pgsql ${SHP2PGSQL_EXTRA_ARGS} -g geom -s "${DEST_SRID}" "${NEW_SHP}" "${DEST_DB_TABLE}" | psql "${DEST_DB}" > /dev/null
		rm -rf "${TRANS_TMPDIR}"
	else
		echo "Importing ${SRC_SHP} into table ${DEST_DB}.${DEST_DB_TABLE}"
		shp2pgsql ${SHP2PGSQL_EXTRA_ARGS} -g geom -s "${SRC_SRID}" "${SRC_SHP}" "${DEST_DB_TABLE}" | psql "${DEST_DB}" > /dev/null
	fi

	echo "CREATE INDEX ${DEST_DB_TABLE}_geom_idx ON ${DEST_DB_TABLE} USING gist(geom);" | psql "${DEST_DB}" > /dev/null
}

init_postgis_db()
{
	local DEST_DB=$1

	DB_EXISTS=$(psql -lt | awk '{print $1}' | grep -w "${DEST_DB}" | wc -l)
	if [ "${DB_EXISTS}" = "1" ] ; then
		return 0
	fi

	echo "Initializing postgis database ${DEST_DB}"
	createdb "${DEST_DB}"

	echo "CREATE LANGUAGE plpgsql;" | psql "${DEST_DB}"
	echo "CREATE EXTENSION postgis;" | psql "${DEST_DB}"
}

generate_contours()
{
	local INFILE=$1
	local SRC_SRID=$2
	local INTERVAL=$3
	local DEST_DB_TABLE=$4
	local DEST_DB=$5
	local DEST_SRID=$6

	local DESTDIR=$(mktemp -d)

	echo "Generating contours for file ${INFILE} with interval ${INTERVAL}"
	gdal_contour -a ele -i "${INTERVAL}" "${INFILE}" "${DESTDIR}"/contour.shp
	import_shp "${SRC_SRID}" "${DESTDIR}"/contour.shp "${DEST_DB_TABLE}" -a "" "${DEST_DB}" "${DEST_SRID}"

	rm -rf "${DESTDIR}"
}

create_contour_table()
{
	local DEST_DB=$1
	local DEST_SRID=$2
	local DEST_DB_TABLE=$3

	psql "${DEST_DB}" << __EOF__
CREATE TABLE "${DEST_DB_TABLE}" (gid serial PRIMARY KEY,
"id" int4,
"ele" float8);
SELECT AddGeometryColumn('','${DEST_DB_TABLE}','geom','${DEST_SRID}','MULTILINESTRING',2);
__EOF__
}

does_postgresql_table_exist()
{
	local DB=$1
	local TABLE=$2

	psql -c "\d" "${DB}" -t | awk '{print $3}' | grep -w "${TABLE}" | wc -l
}

create_aerial_image_table()
{
	local DEST_DB=$1
	local DEST_DB_TABLE=$2

	psql "${DEST_DB}" << __EOF__
CREATE TABLE "${DEST_DB_TABLE}" ("rid" serial PRIMARY KEY,"rast" raster,"filename" text);
__EOF__
}

